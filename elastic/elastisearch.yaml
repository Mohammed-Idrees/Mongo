apiVersion: v1
kind: Template
metadata:
   name: elk
   annotations:
     description: elasticseach for openshift
     tags: log,storage,data,visualization
parameters:
- description: Elastic image name
  displayName: Elastic image Name
  name: ELASTIC_IMAGE_NAME
  value: elasticsearch/elasticsearch-oss
- description: Elastic image tag
  displayName: Elastic image tag
  name: ELASTIC_IMAGE_TAG
  value: 7.10.2
- description: Image repository name
  displayName: Repository Name
  name: IMAGE_REPO_NAME
  value: docker.elastic.co
- description: Storage size for PVC
  displayName: Storage size 
  name: STORAGE_SIZE
  value: 30Gi
- description: ip address of NFS server
  displayName: NFS server
  name: NFS_SERVER
  value: 167.254.204.230
objects:

- apiVersion: v1
  kind: PersistentVolume
  metadata:
    name: elastic-volume
    labels:
      app: "index"
  spec:
    storageClassName: manual
    capacity:
      storage: 10Gi
    accessModes:
      - ReadWriteMany
    nfs:
      server: ${NFS_SERVER}
      path: /mnt/k8sMount/elastic_dump

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: elastic-claim
  spec:
    storageClassName: manual
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: 10Gi
    volumeName: elastic-volume

- apiVersion: policy/v1beta1
  kind: PodDisruptionBudget
  metadata:
    name: "index-pdb"
  spec:
    maxUnavailable: 1
    selector:
      matchLabels:
        app: "index"

- apiVersion: v1
  kind: Service
  metadata:
    name: index
    labels:
      app: "index"
    annotations:
      {}
  spec:
    type: ClusterIP
    selector:
      app: "index"
    ports:
    - name: http
      protocol: TCP
      port: 9200
    - name: transport
      protocol: TCP
      port: 9300

- apiVersion: v1
  kind: Service
  metadata:
    name: index-headless
    labels:
      app: "index"
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  spec:
    clusterIP: None # This is needed for statefulset hostnames like elasticsearch-0 to resolve
    # Create endpoints also if the related pod isn't ready
    publishNotReadyAddresses: true
    selector:
      app: "index"
    ports:
    - name: http
      port: 9200
    - name: transport
      port: 9300
 
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: elasticsearch
    labels:
      app: elasticsearch
      stack: logging
  data:
    elasticsearch.yml: |
      cluster.name: "docker-cluster"
      network.host: 0.0.0.0
      path.repo: ["/usr/share/elasticsearch/backups"]
      discovery.seed_hosts: ["167.254.204.201:32415,index-headless,167.254.204.238:30031,167.254.204.201:30031,167.254.204.225:30031"]

- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    name: index
    labels:
      app: "index"
    annotations:
      esMajorVersion: "7"
  spec:
    serviceName: index-headless
    selector:
      matchLabels:
        app: "index"
    replicas: 3
    podManagementPolicy: Parallel
    updateStrategy:
      type: RollingUpdate
    volumeClaimTemplates:
    - metadata:
        name: index-persistent-storage
        annotations:
           volume.beta.kubernetes.io/storage-class: "managed-nfs-storage"
      spec:
        accessModes:
        - ReadWriteMany
        resources:
          requests:
            storage: "${STORAGE_SIZE}"
    template:
      metadata:
        name: "index"
        labels:
          app: "index"
        annotations:
          
      spec:
        securityContext:
          fsGroup: 1000
          runAsUser: 1000
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - "index"
              topologyKey: kubernetes.io/hostname
        terminationGracePeriodSeconds: 120
        volumes:
        - name: config
          configMap:
            name: elasticsearch
        - name: elastic-dump
          persistentVolumeClaim:
            claimName: elastic-claim
        ##enableServiceLinks: true
        initContainers:
        - name: configure-sysctl
          securityContext:
            runAsUser: 0
            privileged: true
          image: "${IMAGE_REPO_NAME}/${ELASTIC_IMAGE_NAME}:${ELASTIC_IMAGE_TAG}"
          imagePullPolicy: "IfNotPresent"
          command: ["sysctl", "-w", "vm.max_map_count=262144"]
          resources:
            {}
        containers:
        - name: "elasticsearch"
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          image: "${IMAGE_REPO_NAME}/${ELASTIC_IMAGE_NAME}:${ELASTIC_IMAGE_TAG}"
          imagePullPolicy: "IfNotPresent"
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  #!/usr/bin/env bash -e
                  # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                  # Once it has started only check that the node itself is responding
                  START_FILE=/tmp/.es_start_file
  
                  # Disable nss cache to avoid filling dentry cache when calling curl
                  # This is required with Elasticsearch Docker using nss < 3.52
                  export NSS_SDB_USE_CACHE=no
  
                  http () {
                    local path="${1}"
                    local args="${2}"
                    set -- -XGET -s
  
                    if [ "$args" != "" ]; then
                      set -- "$@" $args
                    fi
  
                    if [ -n "${ELASTIC_USERNAME}" ] && [ -n "${ELASTIC_PASSWORD}" ]; then
                      set -- "$@" -u "${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}"
                    fi
  
                    curl --output /dev/null -k "$@" "http://127.0.0.1:9200${path}"
                  }
  
                  if [ -f "${START_FILE}" ]; then
                    echo 'Elasticsearch is already running, lets check the node is healthy'
                    HTTP_CODE=$(http "/" "-w %{http_code}")
                    RC=$?
                    if [[ ${RC} -ne 0 ]]; then
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with RC ${RC}"
                      exit ${RC}
                    fi
                    # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                    if [[ ${HTTP_CODE} == "200" ]]; then
                      exit 0
                    elif [[ ${HTTP_CODE} == "503" && "7" == "6" ]]; then
                      exit 0
                    else
                      echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                      exit 1
                    fi
  
                  else
                    echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                    if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                      touch ${START_FILE}
                      exit 0
                    else
                      echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                      exit 1
                    fi
                  fi
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 3
            timeoutSeconds: 5
          ports:
          - name: http
            containerPort: 9200
          - name: transport
            containerPort: 9300
          resources:
            limits:
              cpu: 4
              memory: 8Gi
            requests:
              cpu: 2
              memory: 4Gi
          env:
            - name: node.name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: cluster.initial_master_nodes
              value: "index-0,index-1,index-2,"
            - name: discovery.seed_hosts
              value: "index-headless,167.254.204.238:30031,167.254.204.201:30031,167.254.204.225:30031"
            - name: cluster.name
              value: "elasticsearch"
            - name: network.host
              value: "0.0.0.0"
            - name: ES_JAVA_OPTS
              value: "-Xmx4g -Xms4g"
            - name: node.data
              value: "true"
            - name: node.ingest
              value: "true"
            - name: node.master
              value: "true"
            - name: node.remote_cluster_client
              value: "true"
          volumeMounts:
            - name: "index-persistent-storage"
              mountPath: /usr/share/elasticsearch/data
            - name: config
              mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
              subPath: elasticsearch.yml
            - name: elastic-dump
              mountPath: /usr/share/elasticsearch/backups
            
